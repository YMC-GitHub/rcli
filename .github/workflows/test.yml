# [dzfrias/projectable's ci](https://github.com/dzfrias/projectable/blob/main/.github/workflows/ci.yml)

# code(core): set this github action name as test

name: test

# code(core): let this workflow run when branch main push or pull_request
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: rcli
  RUST_BACKTRACE: 1
  RUST_LOG: trace

jobs:
  # code(core): define job test
  test:
    name: test
    # code(core): let it run on strategy.matrix.os
    # code(core): use os ubuntu-latest, windows-latest,macos-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true

          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            use-cross: true

          - build: windows-gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            use-cross: false

          - build: windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false

          - build: windows32-msvc
            os: windows-latest
            target: i686-pc-windows-msvc
            use-cross: false
    runs-on: ${{ matrix.os }}

    steps:
      # code(core): clone -> install rust -> setup cache -> build -> run test
      - name: clone repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --verbose --release

      - name: Run tests
        run: cargo test --verbose

      - name: Archive to x.zip or x.tar.gz
        shell: bash
        run: |
          ls -al target
          ls -al target/release
          find target -name '*${{ env.APP_NAME }}*' -type f -prune -print

          # Replace with the name of your binary
          binary_name="${{ env.APP_NAME }}"

          dirname="${{ env.APP_NAME }}-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          # if [ "${{ matrix.os }}" = "windows-latest" ]; then
          #   mv "target/${{ matrix.target }}/release/${{ env.APP_NAME }}.exe" "$dirname"
          # else
          #   mv "target/${{ matrix.target }}/release/${{ env.APP_NAME }}" "$dirname"
          # fi

          # if [ "${{ matrix.os }}" = "windows-latest" ]; then
          #   7z a "$dirname.zip" "$dirname"
          #   echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          # else
          #   tar -czf "$dirname.tar.gz" "$dirname"
          #   echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          # fi

          ls -lh $ASSET | awk '{print $5}'
